var documenterSearchIndex = {"docs":
[{"location":"Julia2ndLang/ch2_julia_as_a_calculator/#Julia-as-a-calculator","page":"Julia as a calculator","title":"Julia as a calculator","text":"","category":"section"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/#The-Julia-command-line","page":"Julia as a calculator","title":"The Julia command line","text":"","category":"section"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/","page":"Julia as a calculator","title":"Julia as a calculator","text":"Julia REPL behaves almost similar to general scientific or engineering calculators. In most cases, Julia accepts input style which people are familiar to.  ","category":"page"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/#Using-constants-and-variables","page":"Julia as a calculator","title":"Using constants and variables","text":"","category":"section"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/","page":"Julia as a calculator","title":"Julia as a calculator","text":"We can use identifiers, constants, variables, and function in Julia coding as well as Julia REPL","category":"page"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/","page":"Julia as a calculator","title":"Julia as a calculator","text":"const let us define our own constants\n\\ enables display built-in constants with their symblos\nJulia binds number and variables, does not assign. A variable that has a number can be bound to a new number.\nJulia supports literal coefficient, by tab completion (see table below).","category":"page"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/","page":"Julia as a calculator","title":"Julia as a calculator","text":"x = 3\n2 * x = 6\n2x = 6","category":"page"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/","page":"Julia as a calculator","title":"Julia as a calculator","text":"Character Tab Completion\nModule \\pi\nPackage \\theta\nEnvironment \\Delta\n \\euler\n \\sqrt\n \\varphi","category":"page"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/#Different-number-types-and-their-bit-length-in-Julia","page":"Julia as a calculator","title":"Different number types and their bit length in Julia","text":"","category":"section"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/","page":"Julia as a calculator","title":"Julia as a calculator","text":"Julia provides various types of numbers","category":"page"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/","page":"Julia as a calculator","title":"Julia as a calculator","text":"Integer: default bit length of Julia is 'signed 64-bit (Int64).'\nJulia does not automatically pick a number type large enough to hodl the result of an arithmetic operation (overflows).\nJulia defaults to showing all signed numbers in decimal format and unsigned numbers, such as UInt8, in hexadecimal format.","category":"page"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/#Floating-point-numbers","page":"Julia as a calculator","title":"Floating-point numbers","text":"","category":"section"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/","page":"Julia as a calculator","title":"Julia as a calculator","text":"The default size is 64 bit, which means each floating-point number consumes 8 bytes of memory","category":"page"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/#Defining-functions","page":"Julia as a calculator","title":"Defining functions","text":"","category":"section"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/","page":"Julia as a calculator","title":"Julia as a calculator","text":"Functions use constants and arguments.\nFunctions can be saved in a .jl file.","category":"page"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/","page":"Julia as a calculator","title":"Julia as a calculator","text":"r = 4.5\nV = 4*pi*r^3/3  # V=381.7035... r is the argument, and V will be recalculated as r changes\nfoo(x, y, z) = 2x + 4y - z  # x, y, z are arguments that consist of the function foo","category":"page"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/","page":"Julia as a calculator","title":"Julia as a calculator","text":"# Volume calculations, consider that the code below is saved as 'volumes.jl'\nsphere_volume(r)        = 4*pi*r^3/3  # r is argument\ncylinder_volume(r, h)   = pi*r^2*h    # r, h are arguments\n\n# In julia REPL\ninclude(\"volumes.jl\")\ncylinder_volume(1, 2)\n6.2831...","category":"page"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/#How-to-use-numbers-in-practice","page":"Julia as a calculator","title":"How to use numbers in practice","text":"","category":"section"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/","page":"Julia as a calculator","title":"Julia as a calculator","text":"Keep in mind the below","category":"page"},{"location":"Julia2ndLang/ch2_julia_as_a_calculator/","page":"Julia as a calculator","title":"Julia as a calculator","text":"Just use the default integer and floating-point sizes. Only consider smaller or larger numbers when performance or the nature of your problem demands it.\nPrefer signed integers to unsigned. It is very easy to make a mistake using unsigned numbers.","category":"page"},{"location":"Julia2ndLang/ch3_control_flow/#Control-flow","page":"Control flow","title":"Control flow","text":"","category":"section"},{"location":"Julia2ndLang/ch5_working_with_text/#Working-with-text","page":"Working with test","title":"Working with text","text":"","category":"section"},{"location":"Julia2ndLang/ch7_understanding_types/#Understanding-types","page":"Understanding types","title":"Understanding types","text":"","category":"section"},{"location":"ch0_setup_julia_env/#Setup-Julia-Repo-in-GitHub-with-Actions","page":"Setup environments","title":"Setup Julia Repo in GitHub with Actions","text":"","category":"section"},{"location":"ch0_setup_julia_env/#Install-Julia","page":"Setup environments","title":"Install Julia","text":"","category":"section"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"Basically if you are using Linux or Mac, you can easily install Julia by the package manager. For Gentoo, we can install it with portage as following.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"$ sudo emerge -av julia\n","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"The problem to install Julia by Gentoo package manager is slow upgrade speed. In this time, July 27 2023, latest stable version version of Julia in the official site is 1.9.2 but Gentoo still has 1.8.5 as the latest one. To overcome this gap, according to the instruction in Julia GitHub we can easily install it by compiling source.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"$ cd localgit  <-- local git directory\n$ git clone https://github.com/JuliaLang/julia.git\n$ cd julia\n$ git checkout v1.9.2  <-- tag for latest version\n$ make\n$ ln -s julia ~/.local/bin/julia  <-- This should be earlier path than /usr/bin/julia","category":"page"},{"location":"ch0_setup_julia_env/#Setup-Julia-language-server-with-formatter-for-Neovim","page":"Setup environments","title":"Setup Julia language server with formatter for Neovim","text":"","category":"section"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"info: Info\nThis setup is based on cloned Neovim-from-scratch and Github repo: evoagile_configs repo.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"To setup LSP(Language Server Protocol) with julials.lua file in Neovim-from-scratch, we need to setup nvim-lspconfig environment first. Using stow tool, we can copy Makefile to ~/.julia/environments/nvim-lspconfig/.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"$ cd localgit/evoagile_configs   <-- if your local cloned repo is in localgit\n$ stow -t ~ julia\n$ cd ~/.julia/environments/nvim-lspconfig/\n$ make","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"After make command, neovim is launched and open Example.jl source file with some errors. If you wait a moment and no problem occur to install, you can find some bullets as following screenshot.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"(Image: Example.jl with bullets)","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"Then just quit neovim and continue and finish installation. To test installation, open any example Julia file and change keyword function to func tion and at the same line, input gl. If you have some bullets and messages as following, your installation is successful. (Image: Success to install)","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"If you have any error to load Julia LSP, you can find following errror message in neovim. (Image: Fail message)","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"As you can find in the following, LanguageServer package depends on JuliaFormatter, StaticLint, and SymbolServer. That means we do not have to install JuliaFormatter separately.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"using Pkg\nPkg.add(\"LanguageServer\")\n","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"To format your code, you can find related commends in keymaps.lua file. Type :Format in command or <space key>f(when <localleader> = <space key>) in normal mode, whole code in the file will be formatted.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"info: Info\nTo get supported to Julia formatting, we can also try to use JuliaFormatter.vim. This only supports formatting and no other LSP function but range format supporting in visual mode and definition of format option in configuration file are possible. This uses JuliaFormatter independently. However, I found that when we use Julia LSP with this package, LSP was crashed occasionally. So I decided to uninstall it.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"To define format parameters in Julia code is not easy in LSP configuration file. The solution is use '.JuliaFormatter.toml' file in every repo. So it can be convenient to add this file to PkgTemplates. (See below section)","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"info: Info\nThe useful configuration to format isstyle = \"sciml\"\nindent = 2\nmargin = 79For style options, see YAS, Blue, and SciML.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"tip: Tip\nThe shortcut keys to use LSP is defined in handler.lua Some useful keys aregl: read diagnostics messages\ngd: Go the the definition\nK: Get help for functions, variables and so on.\ngr: Get references or usages of functions. Looks only supported in the same file.\n<leader>la: Add code actions. For example add docstrings after definding function.\n<leader>lr: rename function. Looks only supported in the same file.","category":"page"},{"location":"ch0_setup_julia_env/#Use-[PkgTemplates](https://github.com/JuliaCI/PkgTemplates.jl)-to-generate-repository","page":"Setup environments","title":"Use PkgTemplates to generate repository","text":"","category":"section"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"PkgTemplates simplifies the process of setting up the initial file structure for a new repository, specifically CI integration with GitHub actions. To use PkgTemplates, we recommend to install it in system default Julia environment, for example, v1.9 as following.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"using Pkg\nPkg.activate()   # activate system default env\nPkg.add(\"PkgTemplates\")","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"After installing it, we need to setup the template. It would be convenient to keep it in the startup.jl file for easy reuse. Because this file runs every time Julia starts up, we can utilize the generate function as shown in the following example.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"function genGithubRepo(userName::String, repoName::String)\n  templateGithub = Template(;\n    user = userName,\n    dir = \"~/localgit\",\n    julia = v\"1\",  # for [compat] section in Project.toml\n    plugins = [\n      # Use semantic version, See Julia Pattern book page 43.\n      ProjectFile(; version = v\"1.0.0-DEV\"),\n      License(; name = \"MIT\", path = nothing, destination = \"LICENSE\"),\n      Git(;\n        branch = LibGit2.getconfig(\"init.defaultBranch\", \"master\"),\n        ssh = true,\n        jl = true,\n        manifest = false),\n      GitHubActions(;\n        destination = \"CI.yml\",\n        linux = true,\n        osx = false,\n        windows = false,\n        x64 = true,\n        x86 = false,\n        coverage = true,\n        extra_versions = [\"1.8\", \"1.9\", \"nightly\"]),\n      CompatHelper(; destination = \"CompatHelper.yml\", cron = \"0 0 * * *\"),\n      TagBot(;\n        destination = \"TagBot.yml\",\n        trigger = \"JuliaTagBot\",\n        token = Secret(\"GITHUB_TOKEN\"),\n        ssh = Secret(\"DOCUMENTER_KEY\"),\n        ssh_password = nothing,\n        changelog = nothing,\n        changelog_ignore = nothing,\n        gpg = nothing,\n        gpg_password = nothing,\n        registry = nothing,\n        branches = nothing,\n        dispatch = nothing,\n        dispatch_delay = nothing),\n      Codecov(),\n      Documenter{GitHubActions}(logo = Logo(;\n        light = homedir() * \"/.config/logo/logo.png\",\n        dark = homedir() * \"/.config/logo/logo-dark.png\")),\n      Dependabot(),\n    ])\n  generate(templateGithub, repoName)\nend\n\ngenGithubRepo(\"ecoinfos\", \"JuliaStudy.jl\")","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"To run above code, folowwing things are needed.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"Logo files in $HOME/.config/logo. For example, use stow command to my evoagile_configs repository to setup evoagile logos as following.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"$ cd localgit/evoagile_configs\n$ stow -t ~ logo","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"DOCUMENTER_KEY. This is required for deploying documents and can be generated by DocumeterTools.\nCompatHelper access permission to pull request. Go to GitHub organization(Ex. ecoinfos) -> settings -> Actions -> General and set options with Read and write permissions and Allow GitHub Action to create and approve pull requests. After this organization setting, we can setup repository setting as the same way. That is, without organization setting, we cannot change permission in repository setting. Without this options, you can get error messages as like this.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"{\n    \"message\":\"GitHub Actions is not permitted to create or approve pull requests.\",\n    \"documentation_url\":\n    \"[https://docs.github.com/rest/pulls/pulls#create-a-pull-request]\n    (https://docs.github.com/rest/pulls/pulls#create-a-pull-request)\"}\"\"\",\n    HTTP.Exceptions.StatusError(403, \"POST\",\n    ...\n}","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"info: Info\nThe initial version, v\"1.0.0-DEV\" looks a bit strange because it starts from 1.0. However this is for semantic versioning. A major version number of zero is special—it basically means that every new release is breaking. See also, design patterns book for julia page 43.","category":"page"},{"location":"ch0_setup_julia_env/#Use-[GitHub-CLI](https://cli.github.com/)-to-create-repository-in-GitHub","page":"Setup environments","title":"Use GitHub-CLI to create repository in GitHub","text":"","category":"section"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"Because PkgTemplates only make repository in localgit folder we need to register it in GitHub. Basically this can be possible in GitHub Web page but GitHub-CLI tool make this more easy. In Gentoo, we can install it as following.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"$ sudo emerge -av github-cli\n$ gh auth login","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"After some authentication step, we can access, create and sync an example repository as following.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"$ gh repo list \"ecoinfos\"   # check the list of repo in ecoinfos user.\n$ gh repo create \"ecoinfos/JuliaStudy.jl\" --public\n\n# This repo is required to publish document to GitHub.\n$ gh repo create \"ecoinfos/ecoinfos.github.io\" --public\n\n$ cd localgit/JuliaStudy\n$ git push origin HEAD --tags","category":"page"},{"location":"ch0_setup_julia_env/#Playing-with-[REPL](https://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop)","page":"Setup environments","title":"Playing with REPL","text":"","category":"section"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"To setup REPL, andreypopp/julia-repl-vim is installed in newvim (already installed in Neovim-from-scratch) and Julia default environment as following.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"$ julia    # install in default env.\njulia> using Pkg; Pkg.add(url=\"https://github.com/andreypopp/julia-repl-vim\")","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"Because the startup.jl file contains required startup commands, we can use it without manual setup.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"using REPLVim\n@async REPLVim.serve()","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"Once REPL is launched in another terminal and open a Julia file, we can connect the code to REPL by :JuliaREPLConnect or <localleader>o.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"<localleader>o: Connect current file to REPL. You need to connect every files to REPL if you want to send them.\n<localleader>u: In normal mode, send the cursor line to REPL. In visual mode, send all lines in the range to REPL.\n<localleader>k: In visual mode, send exact range to REPL. This is useful if you want to send a part of code in a line to REPL.\n<localleader>/: Format and send code whose block has same indented level.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"tip: Tip\nAbove key mappings are same for Python REPL. So, you can use them to connect Qt Console to build REPL.","category":"page"},{"location":"ch0_setup_julia_env/#Coding-with-snippets","page":"Setup environments","title":"Coding with snippets","text":"","category":"section"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"To make coding more easy, a few snippets are defined in julia.lua. To add and understand the definition of them you can refer to offical LuaSnip site. Some frequently used snippets are","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"df : Define function. Type df at the beginning of a line, this automatically generates function end block. There are three fields to input and when finish one, you can shift to next field by <F2> key with ignoring any possible suggestions.\nds : Define structure. Type ds at the beginning of a line, this generate struct end block. You also can find -> mark in the screen and that means there are choices to select. Type <Ctrol + h> or <Ctrol + l> you can change the selection between struct and mutable struct. After selection one, type <F2> to go next field.\n@ : This translate to :: after typing variable name. For example, foo@ changed to foo:: to define type.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"For more snippets, please refer to julia.lua.","category":"page"},{"location":"ch0_setup_julia_env/#Run-tests-and-check-documents","page":"Setup environments","title":"Run tests and check documents","text":"","category":"section"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"When you finish to setup environment and you can try to run all tests in JuliaStudy repository as following.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"$ cd ~/localgit/JuliaStudy\n$ julia --project=.\njulia> using Pkg\njulia> Pkg.test()\n...\nTest Summary: | Pass  Broken  Total     Time\nAll Tests     |  316       1    317  4m53.5s\n     Testing JuliaStudy tests passed","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"This is important to run all tests before you commit your codes. If you have no error messages as above result, you can submit your documents in Github. The Broken test is skipped test for temporary exception.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"To check the documents for Documenter tool, run make.jl in docs project as following.","category":"page"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"$ cd ~/localgit/JuliaStudy/docs\n$ julia --porject=.\njulia> include(\"make.jl\")","category":"page"},{"location":"ch0_setup_julia_env/#To-do-or-practice","page":"Setup environments","title":"To do or practice","text":"","category":"section"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"Add '.JuliaFormatter.toml' file to PkgTemplates to define format option.\nTry to understand GitHub security model with secret keys. See SSH Deploy Keys Walkthrough and security hardening for github actions.","category":"page"},{"location":"ch0_setup_julia_env/#References","page":"Setup environments","title":"References","text":"","category":"section"},{"location":"ch0_setup_julia_env/","page":"Setup environments","title":"Setup environments","text":"Github repo: evoagile_configs\nGithub repo: Neovim-from-scratch/27-Julia-REPL\nSetting up Julia lsp for Neovim\ndiscourse: Neovim + LanguageServer.jl\nHands-On Design Patterns and Best Practices with Julia","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/#Organizing-and-modularizing-your-code","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"","category":"section"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/#Module-naming-rule","page":"Organizing and modularizing your code","title":"Module naming rule","text":"","category":"section"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"From Ref 1.","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"Also, it is common to use UpperCamelCase for module names (just like types), and use the plural form if applicable, especially if the module contains a similarly named identifier, to avoid name clashes.","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/#No-private-method","page":"Organizing and modularizing your code","title":"No private method","text":"","category":"section"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"From Ref 1.","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"However, since qualified names always make identifiers accessible, this is just an option for organizing APIs: unlike other languages, Julia has no facilities for truly hiding module internals.","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/#import-modules","page":"Organizing and modularizing your code","title":"import modules","text":"","category":"section"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"From Ref 1.","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"import .NiceStuff","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"This brings only the module name into scope. Users would need to use NiceStuff.DOG, NiceStuff.Dog, and NiceStuff.nice to access its contents. Usually, import ModuleName is used in contexts when the user wants to keep the namespace clean. As we will see in the next section import .NiceStuff is equivalent to using .NiceStuff: NiceStuff.","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/#Test-specific-dependencies","page":"Organizing and modularizing your code","title":"Test specific dependencies","text":"","category":"section"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"From Pkg manual we do not need to define separate test project to manage specific test dependencies. This still not well defined as the manual said.","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"That is, just install package in the project and move the dependency to test as following.","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"(HelloWorld) pkg> add Markdown","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"Edit project.toml file from","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"[deps]\nMarkdown = \"....\"\n\n[extra]\nTest = \"....\"\n\n[targets]\ntest = [\"Test\"]","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"to","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"[deps]\n\n[extra]\nTest = \"....\"\nMarkdown = \"....\"\n\n[targets]\ntest = [\"Test\", \"Markdown\"]","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/#Module,-package-and-environment","page":"Organizing and modularizing your code","title":"Module, package and environment","text":"","category":"section"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"Julia Java C++ Python\nModule Package Namespace Module\nPackage JAR DLL Package\nEnvironment Environment Sandbox or Container Virtual environment","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"Julia module is the same concept as C++ namespace and environment in Julia has same meaning in virtual environment in Python.","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/#Using-and-import","page":"Organizing and modularizing your code","title":"Using and import","text":"","category":"section"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"Ref Statement What is brought into the scope\n1 using Calculator interest <br/> rate <br/> Calculator.interest <br/> Calculator.rate\n2 using Calculator: interest interest\n3 import Calculator Calculator.interest <br/> Calculator.rate\n4 import Calculator: interest Calculator.interest\n4 import Calculator.interest Calculator.interest","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/#Environment-stack","page":"Organizing and modularizing your code","title":"Environment stack","text":"","category":"section"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"See Ref 2, 3 for more detail","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"julia> LOAD_PATH\n3-element Vector{String}:\n\"@\"\n\"@v#.#\"\n\"@stdlib\"","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"where @ is the current environment, @v#.# is the default environment for the Julia version that is being in use, and @stdlib is the standard library.","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"For instance, for including just the current environment we can set the value of this variable as:","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"$ export JULIA_LOAD_PATH=\"@\"","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"Then, when we start a Julia session the default option will be the current environment:","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"julia> LOAD_PATH\n1-element Vector{String}:\n\"@\"","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"One can also modify the LOAD_PATH directly on the julian prompt with the following functions:","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"julia> empty!(LOAD_PATH)        # this will clean out the path\njulia> push!(LOAD_PATH, \"@\")    # it will add the current environment","category":"page"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/#References","page":"Organizing and modularizing your code","title":"References","text":"","category":"section"},{"location":"Julia2ndLang/ch16_organizing_and_modularizing_your_code/","page":"Organizing and modularizing your code","title":"Organizing and modularizing your code","text":"Julia manual: modules\nEnvironment stacks (youtube)\nJuliaCon 2019 | Pkg, Project.toml, Manifest.toml and Environments | Fredrik Ekre","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/#Why-Julia?","page":"Why Julia?","title":"Why Julia?","text":"","category":"section"},{"location":"Julia2ndLang/ch1_why_julia/#What-is-Julia?","page":"Why Julia?","title":"What is Julia?","text":"","category":"section"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"From Ref 1.","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"Julia is a general-purpose, multi-platform programming Language that is Suited for numerical analysis and computational Science Dynamically typed (In static language, expression have types; in dynamic language, values have types. -Stefan karpinski) High performance and just-in-time compiled Using automatic memory management (garbage collection) Composable","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/#Pros-and-Cons-of-Julia","page":"Why Julia?","title":"Pros & Cons of Julia","text":"","category":"section"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"Mainly cited from Ref 1.","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"Julia is a relatively new programming language that overcomes the two-language problem (Ref 2.)","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"It provides both \"easy-to-use\" and \"high performance\" advantages.\nGrowing ecosystem of state-of-the-art application packages allow scientists to expand their research interests.","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"Julia is a dynamically typed but is as fast as statically typed languages through JIT compilation.","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"This is TRUE in recent scientific research, in which large amount data is available.","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"Julia catches two rabbits! -> Satisfy scientists and other developers who require the fascinating features of both dynamically & statically typed languages.","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"add an image (Ref 3.)","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"filter(!isempty, readlines(filename))  # strip out empty lines\nfilter(endswith(\"*.png\"), readdir())   # get PNG files\nfindall(==(4), [4, 8, 4, 2, 5, 1])     # find every index of the number 4","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/#Julia's-powerful-features","page":"Why Julia?","title":"Julia's powerful features","text":"","category":"section"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"From Ref 1.","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"Strong facilities for modularizing and reusing code. A strict type system that helps catch bugs in your code when it runs. A sophisticated system for reducing repetitive boilerplate code (metaprogramming9). A rich and flexible type system that allows you to model a wide variety of problems. A well-equipped standard library and various third-party libraries to handle various tasks. Great string processing facilities. This ability is usually a key selling point for any Swiss-Army-knife-style programming language. It is what initially made languages such as Perl, Python, and Ruby popular. Easy interfacing with a variety of other programming languages and tools.","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"Examples of Julia applications in various resaerch fields","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"|         Science         |       Non-science      | | :––––––––––-: | : –––––––––-: | | Computational biology   | Genie, Blink, GTK, QML | | Statistics              | GameZero, Luxor, Gumbo | | Machine learning        | Miletus, TerminalMenus | | Image processing        | Cascadia, QRCode       |","category":"page"},{"location":"Julia2ndLang/ch1_why_julia/#References","page":"Why Julia?","title":"References","text":"","category":"section"},{"location":"Julia2ndLang/ch1_why_julia/","page":"Why Julia?","title":"Why Julia?","text":"[Engheim, E., 2023. Julia as a Second Language, Manning, NY, ISBN 978-16-1729971-1.]\nRoesch, E., Greener, J. G., MacLean, A. L., Nassar, H., Rackauckas, C., Holy, T. E., Stumpf, M. P. H., 2023. Julia for biologists. Nature Methods, 20: 655-664\nNazarathy, Y., 2022. Why use Julia for scientific computing?","category":"page"},{"location":"Julia2ndLang/ch6_storing_data_in_dictionaries/#Storing-data-in-dictionaries","page":"Storing data in dictionaries","title":"Storing data in dictionaries","text":"","category":"section"},{"location":"JuliaPatterns/ch2_modules_packages_and_data_type_concepts/#Modules,-Packages-and-Data-Type-Concepts","page":"Modules, Packages, and Data Type Concepts","title":"Modules, Packages and Data Type Concepts","text":"","category":"section"},{"location":"Julia2ndLang/ch4_julia_as_a_spreadsheet/#Julia-as-a-spreadsheet","page":"Julias as a spreadsheet","title":"Julia as a spreadsheet","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = JuliaStudy","category":"page"},{"location":"#Main-text-book-to-study","page":"Home","title":"Main text book to study","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"J2L: Julia as a second language, Erik Engheim, 2023\nJDP: Hands on design patterns and best practices with julia, Tom Kwong, 2020","category":"page"},{"location":"#Study-Schedule-(2023)","page":"Home","title":"Study Schedule (2023)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Date Range Presenter\nAug 2 Setup Julia Repo in GitHub with Actions Norel\nAug 10 Why Julia? Kjeong\nAug 17 Organizing and modularizing your code, Modules, Packages and Data Type Concepts Norel\nAug 24 Julia as a calculator Kjeong\nAug 31 Control flow Norel\nSep 7 Julia as a spreadsheet kjeong\nSep 14 Working with text Norel\nSep 21 Storing data in dictionaries kjeong\nSep 28 Understanding types, Modules, Packages and Data Type Concepts Norel","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for JuliaStudy.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [\nJuliaStudy,\nJuliaStudy.Julia2ndLang.BattleSimul,\nJuliaStudy.Julia2ndLang.ToyGeometry,\nJuliaStudy.JuliaPatterns.Calculator,\nJuliaStudy.JuliaPatterns.DataTypeConcepts,\nJuliaStudy.JuliaPatterns.SharedArrayPattern,\nJuliaStudy.JuliaPatterns.SpaceWar,\nJuliaStudy.JuliaPatterns.Vehicle,\n]","category":"page"},{"location":"#Base.:==-Tuple{JuliaStudy.Julia2ndLang.BattleSimul.Archer, JuliaStudy.Julia2ndLang.BattleSimul.Archer}","page":"Home","title":"Base.:==","text":"Base.:(==)(a::Archer, b::Archer)\n\nSee https://stackoverflow.com/questions/70362843/how-to-create-equality-test-case-for-custom-structures-in-julia\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.Julia2ndLang.ToyGeometry.cone_value-Tuple{Number, Number}","page":"Home","title":"JuliaStudy.Julia2ndLang.ToyGeometry.cone_value","text":"cone_value(r, h)\n\nCalculate the volume of a cone with radius r and height h.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.Julia2ndLang.ToyGeometry.cosine-Tuple{Number}","page":"Home","title":"JuliaStudy.Julia2ndLang.ToyGeometry.cosine","text":"cosine(x::Number)\n\nCalculate the cosine of an angle x given in radians\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.Julia2ndLang.ToyGeometry.cylinder_volume-Tuple{Number, Number}","page":"Home","title":"JuliaStudy.Julia2ndLang.ToyGeometry.cylinder_volume","text":"cylinder_volume(r, h)\n\nCalculate the volume of a cylinder with radius r and height h.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.Julia2ndLang.ToyGeometry.fac-Tuple{Any}","page":"Home","title":"JuliaStudy.Julia2ndLang.ToyGeometry.fac","text":"fac(n)\n\nGet factorial of n.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.Julia2ndLang.ToyGeometry.sine-Tuple{Number}","page":"Home","title":"JuliaStudy.Julia2ndLang.ToyGeometry.sine","text":"sine(x)\n\nCalculate the sine of an angle x given in radians.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.Julia2ndLang.ToyGeometry.sphere_volume-Tuple{Number}","page":"Home","title":"JuliaStudy.Julia2ndLang.ToyGeometry.sphere_volume","text":"sphere_volume(r)\n\nCalculate the volume of a sphere with radius r\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.JuliaPatterns.Calculator.interest-Tuple{Any, Any}","page":"Home","title":"JuliaStudy.JuliaPatterns.Calculator.interest","text":"interest(amount, rate)\n\nCalculate interest from an amount and interest rate of rate. \n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.JuliaPatterns.Calculator.rate-Tuple{Any, Any}","page":"Home","title":"JuliaStudy.JuliaPatterns.Calculator.rate","text":"rate(amount, interest)\n\nCalculate interest rate based on an amount and interest. \n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.JuliaPatterns.DataTypeConcepts.genSubStr-Tuple{Type, Int64, Int64, String}","page":"Home","title":"JuliaStudy.JuliaPatterns.DataTypeConcepts.genSubStr","text":"genSubStr(inType, indent::Int, level::Int, inStr::String) ::String\n\nGenerate substring for recursive call from subtypeTreeStr.\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.JuliaPatterns.DataTypeConcepts.location-Tuple{JuliaStudy.JuliaPatterns.DataTypeConcepts.Property}","page":"Home","title":"JuliaStudy.JuliaPatterns.DataTypeConcepts.location","text":"location(p::Property)\n\nReturns the location of the property as a tuple of (latitude, longitude).\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.JuliaPatterns.DataTypeConcepts.subtypeTreeStr","page":"Home","title":"JuliaStudy.JuliaPatterns.DataTypeConcepts.subtypeTreeStr","text":"subtypeTreeStr(inType = nothing, indent::Int = 4) ::String\n\nReturn all sub types with tree stucture.\n\nThis function is improved version of subtypetree for easy testing.\n\n\n\n\n\n","category":"function"},{"location":"#JuliaStudy.JuliaPatterns.DataTypeConcepts.subtypetree","page":"Home","title":"JuliaStudy.JuliaPatterns.DataTypeConcepts.subtypetree","text":"subtypetree(roottype, level = 1, indent = 4)\n\nDisplay the entire type hierarchy starting from the specified roottype\n\n\n\n\n\n","category":"function"},{"location":"#JuliaStudy.JuliaPatterns.SharedArrayPattern.std_by_security-Tuple{Any}","page":"Home","title":"JuliaStudy.JuliaPatterns.SharedArrayPattern.std_by_security","text":"std_by_security(valuation)\n\nFind standard deviation of each attribute for each security\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.JuliaPatterns.SpaceWar.explode-Union{Tuple{AbstractVector{T}}, Tuple{T}} where T<:JuliaStudy.JuliaPatterns.SpaceWar.Thing","page":"Home","title":"JuliaStudy.JuliaPatterns.SpaceWar.explode","text":"explode(things::AbstractVector{Any})\n\nexplode an array of objects\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.JuliaPatterns.SpaceWar.overlap-Tuple{JuliaStudy.JuliaPatterns.SpaceWar.Rectangle, JuliaStudy.JuliaPatterns.SpaceWar.Rectangle}","page":"Home","title":"JuliaStudy.JuliaPatterns.SpaceWar.overlap","text":"overlap(A::Rectangle, B::Rectangle)\n\ncheck if two rectangles (A & B) overlap\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.JuliaPatterns.SpaceWar.tow-Union{Tuple{T}, Tuple{JuliaStudy.JuliaPatterns.SpaceWar.Spaceship, T}} where T<:JuliaStudy.JuliaPatterns.SpaceWar.Thing","page":"Home","title":"JuliaStudy.JuliaPatterns.SpaceWar.tow","text":"tow(A::Spaceship, B::T) where {T <: Thing}\n\nequivalent of parametric type\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.JuliaPatterns.Vehicle.engage_wheels!-Tuple","page":"Home","title":"JuliaStudy.JuliaPatterns.Vehicle.engage_wheels!","text":"engage_wheels(args...)\n\nengage wheels for  landing. Optional\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.JuliaPatterns.Vehicle.land2!-Tuple{Any}","page":"Home","title":"JuliaStudy.JuliaPatterns.Vehicle.land2!","text":"land2!(vehicle)\n\nLanding (using trait)\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.JuliaPatterns.Vehicle.move!","page":"Home","title":"JuliaStudy.JuliaPatterns.Vehicle.move!","text":"move!\n\nmove the vehicle by the specified distance\n\n\n\n\n\n","category":"function"},{"location":"#JuliaStudy.JuliaPatterns.Vehicle.position","page":"Home","title":"JuliaStudy.JuliaPatterns.Vehicle.position","text":"position\n\nreturns the (x, y) position of the vehicle\n\n\n\n\n\n","category":"function"},{"location":"#JuliaStudy.JuliaPatterns.Vehicle.power_off!","page":"Home","title":"JuliaStudy.JuliaPatterns.Vehicle.power_off!","text":"power_off!\n\nturn off the vehicle's engine\n\n\n\n\n\n","category":"function"},{"location":"#JuliaStudy.JuliaPatterns.Vehicle.power_on!","page":"Home","title":"JuliaStudy.JuliaPatterns.Vehicle.power_on!","text":"power_on!\n\nturn on the vehicle's engine\n\n\n\n\n\n","category":"function"},{"location":"#JuliaStudy.JuliaPatterns.Vehicle.travel_path-Tuple{Any, Any}","page":"Home","title":"JuliaStudy.JuliaPatterns.Vehicle.travel_path","text":"travel_path(position, destination)\n\nReturns a travel plan from current position to destination\n\n\n\n\n\n","category":"method"},{"location":"#JuliaStudy.JuliaPatterns.Vehicle.turn!","page":"Home","title":"JuliaStudy.JuliaPatterns.Vehicle.turn!","text":"turn!\n\nsteer vehicle to the specified direction\n\n\n\n\n\n","category":"function"}]
}
